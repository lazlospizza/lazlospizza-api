/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace LazlosPizzaShop {
  export type PayoutStruct = {
    payoutBlock: BigNumberish;
    amount: BigNumberish;
    r: BytesLike;
    s: BytesLike;
    v: BigNumberish;
  };

  export type PayoutStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string,
    number
  ] & {
    payoutBlock: BigNumber;
    amount: BigNumber;
    r: string;
    s: string;
    v: number;
  };
}

export interface LazlosPizzaShopInterface extends utils.Interface {
  functions: {
    "artistAllowedWithdrawalAmount(address)": FunctionFragment;
    "artistTotalCommission(address)": FunctionFragment;
    "artistWithdraw()": FunctionFragment;
    "bakePizza(uint256[])": FunctionFragment;
    "bakePizzaPrice()": FunctionFragment;
    "bakeRandomPizza(uint256[],uint256,bytes32,bytes32,uint8)": FunctionFragment;
    "bakeRandomPizzaOn()": FunctionFragment;
    "buyAndBakePizza(uint256[])": FunctionFragment;
    "buyIngredients(uint256[],uint256[])": FunctionFragment;
    "ingredientsContractAddress()": FunctionFragment;
    "isPaidOutForBlock(address,uint256)": FunctionFragment;
    "mintingOn()": FunctionFragment;
    "owner()": FunctionFragment;
    "pizzaContractAddress()": FunctionFragment;
    "randomBakePrice()": FunctionFragment;
    "rebakePizza(uint256,uint256[],uint256[])": FunctionFragment;
    "rebakePizzaPrice()": FunctionFragment;
    "redeemPayout((uint256,uint256,bytes32,bytes32,uint8)[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBakeRandomPizzaOn(bool)": FunctionFragment;
    "setIngredientsContractAddress(address)": FunctionFragment;
    "setMintingOn(bool)": FunctionFragment;
    "setPizzaContractAddress(address)": FunctionFragment;
    "setSystemAddress(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unbakePizza(uint256)": FunctionFragment;
    "unbakePizzaPrice()": FunctionFragment;
    "verifySignature(bytes32,bytes32,bytes32,uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "artistAllowedWithdrawalAmount"
      | "artistTotalCommission"
      | "artistWithdraw"
      | "bakePizza"
      | "bakePizzaPrice"
      | "bakeRandomPizza"
      | "bakeRandomPizzaOn"
      | "buyAndBakePizza"
      | "buyIngredients"
      | "ingredientsContractAddress"
      | "isPaidOutForBlock"
      | "mintingOn"
      | "owner"
      | "pizzaContractAddress"
      | "randomBakePrice"
      | "rebakePizza"
      | "rebakePizzaPrice"
      | "redeemPayout"
      | "renounceOwnership"
      | "setBakeRandomPizzaOn"
      | "setIngredientsContractAddress"
      | "setMintingOn"
      | "setPizzaContractAddress"
      | "setSystemAddress"
      | "transferOwnership"
      | "unbakePizza"
      | "unbakePizzaPrice"
      | "verifySignature"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "artistAllowedWithdrawalAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "artistTotalCommission",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "artistWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bakePizza",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bakePizzaPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bakeRandomPizza",
    values: [BigNumberish[], BigNumberish, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bakeRandomPizzaOn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyAndBakePizza",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "buyIngredients",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "ingredientsContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPaidOutForBlock",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mintingOn", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pizzaContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "randomBakePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rebakePizza",
    values: [BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "rebakePizzaPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemPayout",
    values: [LazlosPizzaShop.PayoutStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBakeRandomPizzaOn",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIngredientsContractAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintingOn",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPizzaContractAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSystemAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unbakePizza",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unbakePizzaPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifySignature",
    values: [BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "artistAllowedWithdrawalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "artistTotalCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "artistWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bakePizza", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bakePizzaPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bakeRandomPizza",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bakeRandomPizzaOn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyAndBakePizza",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyIngredients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ingredientsContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPaidOutForBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintingOn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pizzaContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomBakePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebakePizza",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebakePizzaPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBakeRandomPizzaOn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIngredientsContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintingOn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPizzaContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSystemAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unbakePizza",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unbakePizzaPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySignature",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface LazlosPizzaShop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LazlosPizzaShopInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    artistAllowedWithdrawalAmount(
      artist: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    artistTotalCommission(
      artist: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    artistWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bakePizza(
      tokenIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bakePizzaPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    bakeRandomPizza(
      tokenIds: BigNumberish[],
      timestamp: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bakeRandomPizzaOn(overrides?: CallOverrides): Promise<[boolean]>;

    buyAndBakePizza(
      tokenIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyIngredients(
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ingredientsContractAddress(overrides?: CallOverrides): Promise<[string]>;

    isPaidOutForBlock(
      addr: string,
      payoutBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintingOn(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pizzaContractAddress(overrides?: CallOverrides): Promise<[string]>;

    randomBakePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    rebakePizza(
      pizzaTokenId: BigNumberish,
      ingredientTokenIdsToAdd: BigNumberish[],
      ingredientTokenIdsToRemove: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rebakePizzaPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeemPayout(
      payouts: LazlosPizzaShop.PayoutStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBakeRandomPizzaOn(
      on: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIngredientsContractAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMintingOn(
      on: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPizzaContractAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSystemAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unbakePizza(
      pizzaTokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unbakePizzaPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    verifySignature(
      messageHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  artistAllowedWithdrawalAmount(
    artist: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  artistTotalCommission(
    artist: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  artistWithdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bakePizza(
    tokenIds: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bakePizzaPrice(overrides?: CallOverrides): Promise<BigNumber>;

  bakeRandomPizza(
    tokenIds: BigNumberish[],
    timestamp: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bakeRandomPizzaOn(overrides?: CallOverrides): Promise<boolean>;

  buyAndBakePizza(
    tokenIds: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyIngredients(
    tokenIds: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ingredientsContractAddress(overrides?: CallOverrides): Promise<string>;

  isPaidOutForBlock(
    addr: string,
    payoutBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintingOn(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pizzaContractAddress(overrides?: CallOverrides): Promise<string>;

  randomBakePrice(overrides?: CallOverrides): Promise<BigNumber>;

  rebakePizza(
    pizzaTokenId: BigNumberish,
    ingredientTokenIdsToAdd: BigNumberish[],
    ingredientTokenIdsToRemove: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rebakePizzaPrice(overrides?: CallOverrides): Promise<BigNumber>;

  redeemPayout(
    payouts: LazlosPizzaShop.PayoutStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBakeRandomPizzaOn(
    on: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIngredientsContractAddress(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMintingOn(
    on: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPizzaContractAddress(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSystemAddress(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unbakePizza(
    pizzaTokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unbakePizzaPrice(overrides?: CallOverrides): Promise<BigNumber>;

  verifySignature(
    messageHash: BytesLike,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    artistAllowedWithdrawalAmount(
      artist: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    artistTotalCommission(
      artist: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    artistWithdraw(overrides?: CallOverrides): Promise<void>;

    bakePizza(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bakePizzaPrice(overrides?: CallOverrides): Promise<BigNumber>;

    bakeRandomPizza(
      tokenIds: BigNumberish[],
      timestamp: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bakeRandomPizzaOn(overrides?: CallOverrides): Promise<boolean>;

    buyAndBakePizza(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyIngredients(
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    ingredientsContractAddress(overrides?: CallOverrides): Promise<string>;

    isPaidOutForBlock(
      addr: string,
      payoutBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintingOn(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pizzaContractAddress(overrides?: CallOverrides): Promise<string>;

    randomBakePrice(overrides?: CallOverrides): Promise<BigNumber>;

    rebakePizza(
      pizzaTokenId: BigNumberish,
      ingredientTokenIdsToAdd: BigNumberish[],
      ingredientTokenIdsToRemove: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    rebakePizzaPrice(overrides?: CallOverrides): Promise<BigNumber>;

    redeemPayout(
      payouts: LazlosPizzaShop.PayoutStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBakeRandomPizzaOn(on: boolean, overrides?: CallOverrides): Promise<void>;

    setIngredientsContractAddress(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintingOn(on: boolean, overrides?: CallOverrides): Promise<void>;

    setPizzaContractAddress(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSystemAddress(addr: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unbakePizza(
      pizzaTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unbakePizzaPrice(overrides?: CallOverrides): Promise<BigNumber>;

    verifySignature(
      messageHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    artistAllowedWithdrawalAmount(
      artist: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    artistTotalCommission(
      artist: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    artistWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bakePizza(
      tokenIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bakePizzaPrice(overrides?: CallOverrides): Promise<BigNumber>;

    bakeRandomPizza(
      tokenIds: BigNumberish[],
      timestamp: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bakeRandomPizzaOn(overrides?: CallOverrides): Promise<BigNumber>;

    buyAndBakePizza(
      tokenIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyIngredients(
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ingredientsContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    isPaidOutForBlock(
      addr: string,
      payoutBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintingOn(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pizzaContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    randomBakePrice(overrides?: CallOverrides): Promise<BigNumber>;

    rebakePizza(
      pizzaTokenId: BigNumberish,
      ingredientTokenIdsToAdd: BigNumberish[],
      ingredientTokenIdsToRemove: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rebakePizzaPrice(overrides?: CallOverrides): Promise<BigNumber>;

    redeemPayout(
      payouts: LazlosPizzaShop.PayoutStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBakeRandomPizzaOn(
      on: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIngredientsContractAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMintingOn(
      on: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPizzaContractAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSystemAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unbakePizza(
      pizzaTokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unbakePizzaPrice(overrides?: CallOverrides): Promise<BigNumber>;

    verifySignature(
      messageHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    artistAllowedWithdrawalAmount(
      artist: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    artistTotalCommission(
      artist: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    artistWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bakePizza(
      tokenIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bakePizzaPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bakeRandomPizza(
      tokenIds: BigNumberish[],
      timestamp: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bakeRandomPizzaOn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyAndBakePizza(
      tokenIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyIngredients(
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ingredientsContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPaidOutForBlock(
      addr: string,
      payoutBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintingOn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pizzaContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    randomBakePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebakePizza(
      pizzaTokenId: BigNumberish,
      ingredientTokenIdsToAdd: BigNumberish[],
      ingredientTokenIdsToRemove: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rebakePizzaPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemPayout(
      payouts: LazlosPizzaShop.PayoutStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBakeRandomPizzaOn(
      on: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIngredientsContractAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMintingOn(
      on: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPizzaContractAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSystemAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unbakePizza(
      pizzaTokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unbakePizzaPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifySignature(
      messageHash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
