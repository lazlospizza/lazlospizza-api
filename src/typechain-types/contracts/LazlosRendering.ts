/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface LazlosRenderingInterface extends utils.Interface {
  functions: {
    "baseURI()": FunctionFragment;
    "ingredientTokenMetadata(uint256)": FunctionFragment;
    "ingredientsContractAddress()": FunctionFragment;
    "ingredientsIPFSHash()": FunctionFragment;
    "owner()": FunctionFragment;
    "pizzaTokenMetadata(uint256)": FunctionFragment;
    "pizzasContractAddress()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setIngredientsContractAddress(address)": FunctionFragment;
    "setIngredientsDescription(string)": FunctionFragment;
    "setIngredientsIPFSHash(string)": FunctionFragment;
    "setPizzaDescription(string)": FunctionFragment;
    "setPizzasContractAddress(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "baseURI"
      | "ingredientTokenMetadata"
      | "ingredientsContractAddress"
      | "ingredientsIPFSHash"
      | "owner"
      | "pizzaTokenMetadata"
      | "pizzasContractAddress"
      | "renounceOwnership"
      | "setBaseURI"
      | "setIngredientsContractAddress"
      | "setIngredientsDescription"
      | "setIngredientsIPFSHash"
      | "setPizzaDescription"
      | "setPizzasContractAddress"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ingredientTokenMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ingredientsContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ingredientsIPFSHash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pizzaTokenMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pizzasContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setIngredientsContractAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setIngredientsDescription",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setIngredientsIPFSHash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPizzaDescription",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPizzasContractAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ingredientTokenMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ingredientsContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ingredientsIPFSHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pizzaTokenMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pizzasContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIngredientsContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIngredientsDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIngredientsIPFSHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPizzaDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPizzasContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface LazlosRendering extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LazlosRenderingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    baseURI(overrides?: CallOverrides): Promise<[string]>;

    ingredientTokenMetadata(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ingredientsContractAddress(overrides?: CallOverrides): Promise<[string]>;

    ingredientsIPFSHash(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pizzaTokenMetadata(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pizzasContractAddress(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIngredientsContractAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIngredientsDescription(
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIngredientsIPFSHash(
      hash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPizzaDescription(
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPizzasContractAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  baseURI(overrides?: CallOverrides): Promise<string>;

  ingredientTokenMetadata(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  ingredientsContractAddress(overrides?: CallOverrides): Promise<string>;

  ingredientsIPFSHash(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pizzaTokenMetadata(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  pizzasContractAddress(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIngredientsContractAddress(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIngredientsDescription(
    description: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIngredientsIPFSHash(
    hash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPizzaDescription(
    description: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPizzasContractAddress(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    baseURI(overrides?: CallOverrides): Promise<string>;

    ingredientTokenMetadata(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    ingredientsContractAddress(overrides?: CallOverrides): Promise<string>;

    ingredientsIPFSHash(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pizzaTokenMetadata(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    pizzasContractAddress(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBaseURI(uri: string, overrides?: CallOverrides): Promise<void>;

    setIngredientsContractAddress(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setIngredientsDescription(
      description: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setIngredientsIPFSHash(
      hash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPizzaDescription(
      description: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPizzasContractAddress(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    ingredientTokenMetadata(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ingredientsContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    ingredientsIPFSHash(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pizzaTokenMetadata(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pizzasContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIngredientsContractAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIngredientsDescription(
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIngredientsIPFSHash(
      hash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPizzaDescription(
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPizzasContractAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ingredientTokenMetadata(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ingredientsContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ingredientsIPFSHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pizzaTokenMetadata(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pizzasContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIngredientsContractAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIngredientsDescription(
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIngredientsIPFSHash(
      hash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPizzaDescription(
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPizzasContractAddress(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
