/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export type IngredientStruct = {
  name: string;
  ingredientType: BigNumberish;
  artist: string;
  price: BigNumberish;
  supply: BigNumberish;
  initialSupply: BigNumberish;
};

export type IngredientStructOutput = [
  string,
  number,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  name: string;
  ingredientType: number;
  artist: string;
  price: BigNumber;
  supply: BigNumber;
  initialSupply: BigNumber;
};

export interface ILazlosIngredientsInterface extends utils.Interface {
  functions: {
    "balanceOfAddress(address,uint256)": FunctionFragment;
    "burnIngredients(address,uint256[],uint256[])": FunctionFragment;
    "decreaseIngredientSupply(uint256,uint256)": FunctionFragment;
    "getIngredient(uint256)": FunctionFragment;
    "getNumIngredients()": FunctionFragment;
    "increaseIngredientSupply(uint256,uint256)": FunctionFragment;
    "mintIngredients(address,uint256[],uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balanceOfAddress"
      | "burnIngredients"
      | "decreaseIngredientSupply"
      | "getIngredient"
      | "getNumIngredients"
      | "increaseIngredientSupply"
      | "mintIngredients"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balanceOfAddress",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnIngredients",
    values: [string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseIngredientSupply",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIngredient",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumIngredients",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseIngredientSupply",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintIngredients",
    values: [string, BigNumberish[], BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "balanceOfAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnIngredients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseIngredientSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIngredient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumIngredients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseIngredientSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintIngredients",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ILazlosIngredients extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILazlosIngredientsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOfAddress(
      addr: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burnIngredients(
      addr: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseIngredientSupply(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getIngredient(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IngredientStructOutput]>;

    getNumIngredients(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseIngredientSupply(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintIngredients(
      addr: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balanceOfAddress(
    addr: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burnIngredients(
    addr: string,
    tokenIds: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseIngredientSupply(
    tokenId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getIngredient(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IngredientStructOutput>;

  getNumIngredients(overrides?: CallOverrides): Promise<BigNumber>;

  increaseIngredientSupply(
    tokenId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintIngredients(
    addr: string,
    tokenIds: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOfAddress(
      addr: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnIngredients(
      addr: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    decreaseIngredientSupply(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getIngredient(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IngredientStructOutput>;

    getNumIngredients(overrides?: CallOverrides): Promise<BigNumber>;

    increaseIngredientSupply(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintIngredients(
      addr: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    balanceOfAddress(
      addr: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnIngredients(
      addr: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseIngredientSupply(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getIngredient(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumIngredients(overrides?: CallOverrides): Promise<BigNumber>;

    increaseIngredientSupply(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintIngredients(
      addr: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOfAddress(
      addr: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnIngredients(
      addr: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseIngredientSupply(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getIngredient(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumIngredients(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseIngredientSupply(
      tokenId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintIngredients(
      addr: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
